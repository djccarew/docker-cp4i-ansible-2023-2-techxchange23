---
- name: Get progress marker
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    name: 006-es-install-progress
    namespace: default
    api_key: "{{ login_token }}"
    host: "{{ cluster_api_url }}"
  register: existing_es_install_progress

- name: Create CM marker if needed
  community.okd.k8s:
    state: present
    api_key: "{{ login_token }}"
    host: "{{ cluster_api_url }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: 006-es-install-progress
        namespace: default
      data:
        state: started
  register: new_es_install_progress
  when: (existing_es_install_progress.resources | length) == 0

- name: Get marker CM state (existing marker)
  ansible.builtin.set_fact:
    es_marker_state: "{{ existing_es_install_progress.resources[0].data.state }}"
  when: (existing_es_install_progress.resources | length) == 1

- name: Get marker CM state (new marker)
  ansible.builtin.set_fact:
    es_marker_state: 'started'
  when: (existing_es_install_progress.resources | length) == 0

- name: Debug
  debug:
    var: es_marker_state

- name: Skip es-install task message
  debug:
    msg: "es-install task already completed. Skipping ..."
  when: es_marker_state == 'complete'

- name: Run es-install tasks
  block:
    - name: Executing es-install task message
      debug:
        msg: "Executing es-install task"

    # - name: Set vars for Operator Group
    #   ansible.builtin.set_fact:
    #     operator_group_name: "{{ cp4i_es.operator_group_name }}"
    #     operator_group_namespace:  "{{ cp4i_es.namespace }}"

    # - name: OperatorGroup from template
    #   ansible.builtin.template:
    #     src: templates/cp4i-operator-group.yml.j2
    #     dest: k8s/cp4i-es-operator-group.yml
    #     force: no

    # - name: OperatorGroup
    #   community.okd.k8s:
    #     state: present
    #     api_key: "{{ login_token }}"
    #     host: "{{ cluster_api_url }}"
    #     src: "k8s/cp4i-es-operator-group.yml"

    - name: Subscription from template
      ansible.builtin.template:
        src: cp4i-es-subscription.yml.j2
        dest: k8s/cp4i-es-subscription.yml
        force: no

    - name: Subscription
      community.okd.k8s:
        state: present
        api_key: "{{ login_token }}"
        host: "{{ cluster_api_url }}"
        src: "k8s/cp4i-es-subscription.yml"

    - name: Wait a few seconds for the  CSV to accessible
      ansible.builtin.pause:
        seconds: 5

    - name: Wait up to 3 mins for Subscription to be ready
      kubernetes.core.k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: Subscription
        name: "{{ cp4i_es.subscription_name }}"
        namespace: "{{ cp4i_es.subscription_namespace }}"
        api_key: "{{ login_token }}"
        host: "{{ cluster_api_url }}"
      register: es_subscription
      until: es_subscription.resources is defined and (es_subscription.resources | length) > 0 and es_subscription.resources[0].status.currentCSV is defined
      delay: 10
      retries: 18

    - name: Wait up to  5 mins for Event Streams Operator CSV to be avail
      kubernetes.core.k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        name: "{{ es_subscription.resources[0].status.currentCSV }}"
        namespace: "{{ cp4i_es.namespace }}"
        api_key: "{{ login_token }}"
        host: "{{ cluster_api_url }}"
      register: es_csv
      until: es_csv.resources is defined and (es_csv.resources | length) == 1 and es_csv.resources[0].status is defined and es_csv.resources[0].status.phase is defined and es_csv.resources[0].status.phase == "Succeeded"
      delay: 10
      retries: 30

    - name: EventStreams from template
      ansible.builtin.template:
        src: cp4i-event-streams.yml.j2
        dest: k8s/cp4i-event-streams.yml
        force: no

    - name: EventStreams
      community.okd.k8s:
        state: present
        api_key: "{{ login_token }}"
        host: "{{ cluster_api_url }}"
        src: "k8s/cp4i-event-streams.yml"

  when: es_marker_state == 'started'
